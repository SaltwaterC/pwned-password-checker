#!/usr/bin/env ruby

require 'optparse'
require 'terminal-table'

require_relative '../lib/pwned_password'

options = {
  index: "#{ENV['HOME']}/.pwn/idx",
  pwn: "#{ENV['HOME']}/.pwn/pwned-passwords-sha1-ordered-by-hash-v4.txt",
  bulk: nil,
  quiet: false
}

bin = File.basename($PROGRAM_NAME)

op = OptionParser.new do |parser|
  parser.banner = "Usage: \n\n"\
    "#{bin}               to check a single password\n"\
    "#{bin} --bulk kdbx   to do a bulk check of a KDBX file\n"\
    "\n"

  desc_pwn = 'Path to pwned passwords file. Defaults to '\
    '~/.pwn/pwned-passwords-sha1-ordered-by-hash-v4.txt'
  parser.on('-p', '--pwn pwned-passwords.txt', desc_pwn) do |opt|
    options[:pwn] = opt
  end

  desc_index = 'Path to the directory where the index is going to be written.' \
               ' Defaults to ~/.pwn/idx'
  parser.on('-i', '--index ~/.pwn/idx', desc_index) do |opt|
    options[:index] = opt
  end

  desc_quiet = 'Whether to turn on quiet mode which suppress the password '\
    'prompt'
  parser.on('-q', '--quiet', desc_quiet) do
    options[:quiet] = true
  end

  desc_bulk = 'Turns on bulk checking against supported backends: kdbx'
  parser.on('-b', '--bulk kdbx', desc_bulk) do |opt|
    options[:bulk] = opt
  end

  parser.on('-h', '--help', 'Show this help') do
    puts(parser)
    exit
  end
end

begin
  op.parse!
rescue StandardError => err
  STDERR.puts("ERROR: #{err}")
  STDERR.puts
  STDERR.puts(op)
  exit(1)
end

if options[:bulk].nil?
  PwnedPassword::Checker::Single.new(options).prompt
else
  klass = "PwnedPassword::Checker::#{options[:bulk].capitalize}"
  pwn = Object.const_get(klass).prompt(options)

  puts Terminal::Table.new(
    title: 'Pwned passwords',
    headings: pwn.headings,
    rows: pwn.pwned_passwords.map(&:values)
  )
end
