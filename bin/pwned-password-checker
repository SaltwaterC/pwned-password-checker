#!/usr/bin/env ruby

require 'yaml'
require 'digest'
require 'optparse'
require 'benchmark'
require 'io/console'

def read_bucket(idx, pwn, bucket)
  dir = bucket[(0..1)]
  path = "#{idx}/#{dir}/#{bucket}"
  offsets = YAML.load_file(path)

  File.open(pwn) do |fd|
    fd.pos = offsets['s']
    fd.read(offsets['e'] - offsets['s'])
  end
end

def find_hash(bucket, hash)
  bucket.each_line do |line|
    next unless line.start_with?(hash)
    return line.strip.split(':')[1].to_i
  end
  nil
end

options = {
  index: "#{ENV['HOME']}/.pwn/idx",
  pwn: "#{ENV['HOME']}/.pwn/pwned-passwords-sha1-ordered-by-hash-v4.txt",
  bulk: nil,
  quiet: false
}

bin = File.basename($PROGRAM_NAME)

op = OptionParser.new do |parser|
  parser.banner = "Usage: \n    "\
    "#{bin}           to check a single password\n\n"

  desc_pwn = 'Path to pwned passwords file. Defaults to '\
    '~/.pwn/pwned-passwords-sha1-ordered-by-hash-v4.txt'
  parser.on('-p', '--pwn pwned-passwords.txt', desc_pwn) do |opt|
    options[:pwn] = opt
  end

  desc_index = 'Path to the directory where the index is going to be written.' \
               ' Defaults to ~/.pwn/idx'
  parser.on('-i', '--index ~/.pwn/idx', desc_index) do |opt|
    options[:index] = opt
  end

  desc_quiet = 'Whether to turn on quiet mode which suppress the password '\
    'prompt'
  parser.on('-q', '--quiet', desc_quiet) do
    options[:quiet] = true
  end

  parser.on('-h', '--help', 'Show this help') do
    puts(parser)
    exit
  end
end

begin
  op.parse!
rescue StandardError => err
  STDERR.puts("ERROR: #{err}")
  STDERR.puts
  STDERR.puts(op)
  exit(1)
end

unless options[:bulk].nil?
  STDERR.puts 'bulk mode not implemented, yet'
  exit(1)
end

print 'password> '
if options[:quiet]
  pwd = STDIN.noecho(&:gets).strip
  puts
else
  pwd = gets.strip
end

hash = Digest::SHA1.new.update(pwd).hexdigest.upcase
puts "Hash: #{hash}"

bucket_name = hash[(0..3)]

bucket = ''
count = 0

bm = Benchmark.measure do
  bucket = read_bucket(options[:index], options[:pwn], bucket_name)
  count = find_hash(bucket, hash)
end

if count
  puts "This password has been seen #{count} times before"
else
  puts 'Good news â€” no pwnage found!'
end

puts "Seek time: #{format('%.2f', bm.real * 1000.0)} ms"
